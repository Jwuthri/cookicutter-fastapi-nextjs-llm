"""
{{cookiecutter.project_name}} - FastAPI Backend
{{cookiecutter.description}}

Auto-generated by cookiecutter-fastapi-nextjs-llm
"""

from fastapi import FastAPI
import uvicorn

from app.config import get_settings
from app.middleware import setup_middleware
from app.exceptions import setup_exception_handlers
from app.dependencies import initialize_services, cleanup_services
from app.api.v1.router import api_router
from app.models.base import APIInfo
{% if cookiecutter.use_websockets == "yes" %}
from app.websocket_manager import WebSocketManager
from app.api.websockets import setup_websocket_routes
{% endif %}
from loguru import logger

# Get settings
settings = get_settings()

# Initialize FastAPI app
app = FastAPI(
    title=f"{settings.app_name} API",
    description=settings.description,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# Setup middleware
setup_middleware(app)

# Setup exception handlers  
setup_exception_handlers(app)

# Include API routes
app.include_router(api_router, prefix="/api")

{% if cookiecutter.use_websockets == "yes" %}
# Setup WebSocket routes
setup_websocket_routes(app)
{% endif %}

# Root endpoint
@app.get("/", response_model=APIInfo)
async def root() -> APIInfo:
    """Root endpoint with API information."""
    return APIInfo(
        name=f"{settings.app_name} API",
        version=settings.app_version,
        description=settings.description,
        docs_url="/docs",
        health_url="/health"
    )

# Legacy health endpoint (redirect to v1)
@app.get("/health")
async def health_redirect():
    """Legacy health endpoint - redirects to v1."""
    from fastapi import RedirectResponse
    return RedirectResponse(url="/api/v1/health")

# Startup and shutdown events
@app.on_event("startup")
async def startup_event():
    """Initialize services on startup."""
    try:
        await initialize_services()
        logger.info("All services initialized successfully")
        
    except Exception as e:
        logger.error(f"Failed to initialize services: {e}")
        raise

@app.on_event("shutdown") 
async def shutdown_event():
    """Clean up services on shutdown."""
    try:
        await cleanup_services()
        logger.info("All services cleaned up successfully")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")


if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.reload,
        log_level=settings.log_level.lower(),
        workers=1 if settings.reload else settings.workers
    )