[tool:pytest]
# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 3.8

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Custom markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, external dependencies)
    performance: Performance and load tests
    slow: Tests that take more than 5 seconds
    stress: Stress tests that push system limits
    security: Security-focused tests
    database: Tests that require database
    redis: Tests that require Redis
    mock: Tests using mocks/stubs
    real: Tests using real services
    smoke: Smoke tests for basic functionality
    regression: Regression tests for bug fixes
    flaky: Tests that might be flaky due to timing/external factors

# Test filtering options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5

# Async test configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */site-packages/*
    */migrations/*
    app/cli/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = True
skip_covered = False
precision = 2

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
