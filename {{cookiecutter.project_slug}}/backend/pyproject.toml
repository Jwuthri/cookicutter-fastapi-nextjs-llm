[project]
name = "{{cookiecutter.project_slug}}-backend"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}} - Backend API"
authors = [
    {name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "agno", "openrouter", "ai-agents", "chatbot", "websocket", "ai", "llm", "vector-database"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    # FastAPI and ASGI server
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    
    # Data validation and settings
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # WebSocket support
    "websockets>=12.0",
    
    # Redis for caching and session storage
    "redis[hiredis]>=5.0.1",
    "aioredis>=2.0.1",
    
    # Kafka for message streaming
    "aiokafka>=0.8.11",
    "kafka-python>=2.0.2",
    
    # RabbitMQ for message queuing
    "aio-pika>=9.3.0",
    "pika>=1.3.2",
    
    # Database support (conditional)
    {% if cookiecutter.include_database == "postgresql" %}
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.7",  # For sync operations
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    {% elif cookiecutter.include_database == "sqlite" %}
    "aiosqlite>=0.19.0", 
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    {% else %}
    # Always include basic async database support
    "aiosqlite>=0.19.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    {% endif %}
    
    # CORS and multipart support
    "python-multipart>=0.0.6",
    
    # Environment and configuration
    "python-dotenv>=1.0.0",
    
    # Agno AI Agent Framework
    "agno>=2.0.0",
    
    # OpenAI for Agno + embeddings
    "openai>=1.3.7",
    
    # Vector Database support (conditional)
    {% if cookiecutter.vector_database == "pinecone" %}
    "pinecone-client>=3.0.0",
    {% elif cookiecutter.vector_database == "weaviate" %}
    "weaviate-client>=4.4.0",
    {% elif cookiecutter.vector_database == "qdrant" %}
    "qdrant-client>=1.7.0",
    {% elif cookiecutter.vector_database == "chromadb" %}
    "chromadb>=0.4.18",
    {% endif %}
    
    # NumPy for vector operations
    "numpy>=1.24.0",
    
    # HTTP client
    "httpx>=0.25.2",
    
    # Authentication and JWT
    "pyjwt>=2.8.0",
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    
    # Logging and monitoring
    "rich>=13.7.0",
    "python-json-logger>=2.0.7",
    "prometheus-client>=0.19.0",
    
    # CLI support
    "click>=8.1.7",
    
    # Async utilities
    "asyncio-throttle>=1.0.2",
    "tenacity>=8.2.3",
    
    # JSON serialization
    "orjson>=3.9.10",
    
    # Background tasks
    "celery>=5.3.4",
    
    # Health checks
    "psutil>=5.9.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1", 
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "httpx>=0.25.2",  # For testing
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
]

[project.scripts]
{{cookiecutter.project_slug}} = "app.cli.main:cli"

[project.urls]
Homepage = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}"
Repository = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}"
Issues = "https://github.com/{{cookiecutter.author_name}}/{{cookiecutter.project_slug}}/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0", 
    "black>=23.11.0",
    "isort>=5.12.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "F", "W", "B", "I"]
ignore = ["E203", "W503"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "--cov=app --cov-report=html --cov-report=term-missing"
