---
alwaysApply: true
---

# Project Architecture & Structure

This is a cookiecutter template for building FastAPI + Next.js applications with LLM integration. Follow these architectural principles:

## Project Structure
The project follows a monorepo structure with clear separation:

- `{{cookiecutter.project_slug}}/backend/` - FastAPI backend application
- `{{cookiecutter.project_slug}}/frontend/` - Next.js frontend application
- `docker-compose.yml` - Service orchestration

## Backend Architecture (FastAPI)

### Core Structure
- `app/main.py` - Application entrypoint with lifespan management
- `app/api/v1/` - API endpoints grouped by version
- `app/core/` - Core framework components (config, CQRS, security, monitoring)
- `app/services/` - Business logic services
- `app/models/` - Pydantic models for API contracts
- `app/database/models/` - SQLAlchemy database models
- `app/database/repositories/` - Data access layer
- `app/utils/` - Shared utilities

### Key Patterns
1. **CQRS Architecture**: Commands and Queries are separated with dedicated buses in [app/core/cqrs/](mdc:{{cookiecutter.project_slug}}/backend/app/core/cqrs/)
2. **Dependency Injection**: Services are injected via FastAPI's dependency system
3. **Repository Pattern**: Database access is abstracted through repositories
4. **Service Layer**: Business logic is encapsulated in services
5. **Environment Configuration**: Settings managed via Pydantic settings in [app/core/config/](mdc:{{cookiecutter.project_slug}}/backend/app/core/config/)

## Frontend Architecture (Next.js)

### Core Structure
- `src/app/` - Next.js App Router structure
- `src/components/` - React components organized by feature
- `src/hooks/` - Custom React hooks
- `src/lib/` - Shared utilities and API clients
- `src/types/` - TypeScript type definitions

### Key Patterns
1. **App Router**: Use Next.js 14 App Router for routing
2. **Component Organization**: Components grouped by feature/domain
3. **Provider Pattern**: Context providers for global state
4. **Custom Hooks**: Encapsulate complex logic in custom hooks

## Cross-Cutting Concerns

### Authentication
- Clerk.dev integration for frontend and backend
- JWT token validation in FastAPI middleware

### Monitoring & Observability
- OpenTelemetry distributed tracing
- Prometheus metrics collection
- Structured logging with correlation IDs

### Error Handling
- Custom exception hierarchy
- Global error handlers in FastAPI
- Consistent error response formats

### Testing Strategy
- Unit tests in `tests/unit/`
- Integration tests in `tests/integration/`
- Performance tests in `tests/performance/`
- Comprehensive test coverage with pytest

## LLM Integration
- Agno AI agent framework support
- Multiple LLM provider support (OpenRouter, OpenAI, Anthropic)
- Vector database integration for memory
- Chat service abstraction with multiple implementations
